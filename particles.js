/*eslint-env es6*/

const canvas = document.getElementById("canvas1");
const ctx = canvas.getContext('2d');

canvas.width=window.innerWidth;
canvas.height=window.innerHeight;


let brain_x_coords=[0.46182,0.48182,0.50182,0.52182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.20182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.20182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.20182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.20182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.20182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.22182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.82182,0.24182,0.26182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.28182,0.30182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.32182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.34182,0.36182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.80182,0.38182,0.40182,0.42182,0.44182,0.46182,0.48182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.74182,0.76182,0.78182,0.50182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.52182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.54182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.70182,0.72182,0.56182,0.58182,0.60182,0.62182,0.64182,0.66182,0.68182,0.56182,0.58182,0.58182];
let brain_y_coords=[0.14182,0.14182,0.14182,0.14182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.16182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.18182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.20182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.22182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.24182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.26182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.28182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.30182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.32182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.34182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.36182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.38182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.40182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.42182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.44182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.46182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.48182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.50182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.52182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.54182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.56182,0.58182,0.58182,0.58182,0.58182,0.58182,0.58182,0.58182,0.58182,0.58182,0.58182,0.60182,0.60182,0.60182,0.60182,0.60182,0.60182,0.60182,0.62182,0.62182,0.64182];
let CBR_x_coords=[0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.6467,0.65937,0.67204,0.68471,0.69738,0.71005,0.72272,0.73539,0.74806,0.76073,0.77339,0.78606,0.79873,0.17794,0.19061,0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.30464,0.3173,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.57069,0.6467,0.65937,0.67204,0.68471,0.69738,0.71005,0.72272,0.73539,0.74806,0.76073,0.77339,0.78606,0.79873,0.8114,0.82407,0.16527,0.17794,0.19061,0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.30464,0.3173,0.32997,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.57069,0.6467,0.65937,0.67204,0.68471,0.69738,0.71005,0.72272,0.73539,0.74806,0.76073,0.77339,0.78606,0.79873,0.8114,0.82407,0.16527,0.17794,0.19061,0.20328,0.21595,0.2793,0.29197,0.30464,0.32997,0.40599,0.41866,0.43133,0.53268,0.54535,0.55802,0.57069,0.58336,0.65937,0.67204,0.68471,0.78606,0.79873,0.8114,0.82407,0.83674,0.15261,0.16527,0.17794,0.19061,0.29197,0.30464,0.3173,0.32997,0.34264,0.40599,0.41866,0.43133,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.79873,0.8114,0.82407,0.83674,0.15261,0.16527,0.17794,0.19061,0.30464,0.3173,0.32997,0.40599,0.41866,0.43133,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.79873,0.8114,0.82407,0.83674,0.13994,0.15261,0.16527,0.17794,0.40599,0.41866,0.43133,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.79873,0.8114,0.82407,0.83674,0.13994,0.15261,0.16527,0.17794,0.40599,0.41866,0.43133,0.52001,0.53268,0.54535,0.55802,0.57069,0.6467,0.65937,0.67204,0.68471,0.78606,0.79873,0.8114,0.82407,0.83674,0.13994,0.15261,0.16527,0.17794,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.6467,0.65937,0.67204,0.68471,0.69738,0.71005,0.72272,0.73539,0.74806,0.76073,0.77339,0.78606,0.79873,0.8114,0.82407,0.13994,0.16527,0.17794,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.50734,0.52001,0.53268,0.54535,0.55802,0.6467,0.65937,0.67204,0.68471,0.69738,0.71005,0.72272,0.73539,0.74806,0.76073,0.77339,0.78606,0.79873,0.8114,0.13994,0.15261,0.16527,0.17794,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.71005,0.72272,0.73539,0.74806,0.76073,0.78606,0.13994,0.15261,0.16527,0.17794,0.40599,0.41866,0.43133,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.73539,0.74806,0.76073,0.77339,0.78606,0.13994,0.15261,0.16527,0.17794,0.30464,0.40599,0.41866,0.43133,0.55802,0.57069,0.58336,0.59603,0.6467,0.65937,0.67204,0.68471,0.74806,0.76073,0.77339,0.78606,0.79873,0.15261,0.17794,0.19061,0.30464,0.3173,0.32997,0.34264,0.40599,0.41866,0.43133,0.55802,0.57069,0.58336,0.59603,0.6467,0.65937,0.67204,0.68471,0.76073,0.77339,0.78606,0.79873,0.8114,0.15261,0.16527,0.17794,0.19061,0.29197,0.30464,0.3173,0.32997,0.34264,0.40599,0.41866,0.43133,0.55802,0.57069,0.58336,0.59603,0.6467,0.67204,0.68471,0.77339,0.78606,0.79873,0.8114,0.82407,0.15261,0.16527,0.17794,0.19061,0.20328,0.2793,0.29197,0.30464,0.3173,0.32997,0.40599,0.41866,0.43133,0.54535,0.55802,0.57069,0.58336,0.59603,0.6467,0.65937,0.67204,0.68471,0.77339,0.78606,0.79873,0.8114,0.16527,0.17794,0.19061,0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.30464,0.3173,0.32997,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.53268,0.54535,0.55802,0.57069,0.58336,0.6467,0.65937,0.67204,0.68471,0.78606,0.79873,0.8114,0.82407,0.83674,0.17794,0.19061,0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.30464,0.3173,0.40599,0.41866,0.43133,0.444,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.57069,0.6467,0.65937,0.67204,0.68471,0.79873,0.8114,0.82407,0.83674,0.84941,0.19061,0.20328,0.21595,0.22862,0.24129,0.25396,0.26663,0.2793,0.29197,0.30464,0.40599,0.41866,0.43133,0.444,0.45667,0.46933,0.482,0.49467,0.50734,0.52001,0.53268,0.54535,0.55802,0.6467,0.65937,0.67204,0.68471,0.79873,0.8114,0.82407,0.83674,0.84941,0.22862,0.24129,0.25396,0.26663];
let CBR_y_coords
let Fivenode_x_coords=[0.45856,0.47765,0.49674,0.51582,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.38222,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.59216,0.34405,0.36313,0.38222,0.40131,0.45856,0.47765,0.49674,0.51582,0.57308,0.59216,0.61125,0.32496,0.34405,0.36313,0.43948,0.45856,0.51582,0.53491,0.61125,0.63034,0.64942,0.19136,0.21045,0.22953,0.24862,0.2677,0.30588,0.32496,0.34405,0.43948,0.45856,0.51582,0.53491,0.63034,0.64942,0.66851,0.70668,0.72577,0.74485,0.76394,0.78302,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.43948,0.45856,0.51582,0.53491,0.64942,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.15319,0.17228,0.19136,0.21045,0.22953,0.2677,0.28679,0.42039,0.43948,0.53491,0.55399,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.8212,0.15319,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.8212,0.15319,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.8212,0.15319,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.40131,0.42039,0.55399,0.57308,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.8212,0.15319,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.40131,0.42039,0.55399,0.57308,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.17228,0.19136,0.21045,0.22953,0.24862,0.2677,0.28679,0.30588,0.32496,0.40131,0.42039,0.55399,0.57308,0.63034,0.64942,0.66851,0.68759,0.70668,0.72577,0.74485,0.76394,0.78302,0.80211,0.21045,0.22953,0.24862,0.2677,0.32496,0.34405,0.36313,0.38222,0.40131,0.57308,0.59216,0.61125,0.63034,0.64942,0.70668,0.72577,0.74485,0.76394,0.24862,0.2677,0.34405,0.36313,0.38222,0.40131,0.57308,0.59216,0.61125,0.63034,0.70668,0.72577,0.24862,0.2677,0.36313,0.38222,0.40131,0.42039,0.55399,0.57308,0.59216,0.70668,0.2677,0.28679,0.36313,0.38222,0.40131,0.42039,0.43948,0.53491,0.55399,0.57308,0.59216,0.68759,0.70668,0.2677,0.28679,0.36313,0.38222,0.42039,0.43948,0.45856,0.51582,0.53491,0.55399,0.59216,0.61125,0.68759,0.70668,0.2677,0.28679,0.36313,0.38222,0.45856,0.47765,0.49674,0.51582,0.59216,0.61125,0.68759,0.70668,0.28679,0.30588,0.34405,0.36313,0.45856,0.47765,0.49674,0.51582,0.61125,0.66851,0.68759,0.28679,0.30588,0.34405,0.36313,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.61125,0.63034,0.66851,0.68759,0.28679,0.30588,0.32496,0.34405,0.36313,0.40131,0.42039,0.43948,0.53491,0.55399,0.57308,0.61125,0.63034,0.64942,0.66851,0.68759,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.42039,0.55399,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.72577,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.42039,0.43948,0.45856,0.47765,0.49674,0.51582,0.53491,0.55399,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.72577,0.24862,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.40131,0.57308,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.72577,0.2677,0.28679,0.30588,0.32496,0.34405,0.36313,0.38222,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.70668,0.28679,0.30588,0.32496,0.34405,0.36313,0.59216,0.61125,0.63034,0.64942,0.66851,0.68759,0.32496,0.64942];
let Fivenode_y_coords=[0.05776,0.05776,0.05776,0.05776,0.076846,0.076846,0.076846,0.076846,0.076846,0.076846,0.076846,0.095932,0.095932,0.095932,0.095932,0.095932,0.095932,0.095932,0.095932,0.11502,0.11502,0.11502,0.11502,0.11502,0.11502,0.11502,0.11502,0.1341,0.1341,0.1341,0.1341,0.1341,0.1341,0.1341,0.1341,0.1341,0.15319,0.15319,0.15319,0.15319,0.15319,0.15319,0.15319,0.15319,0.17228,0.17228,0.17228,0.17228,0.17228,0.17228,0.17228,0.17228,0.17228,0.17228,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.19136,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.21045,0.22953,0.22953,0.22953,0.22953,0.22953,0.22953,0.22953,0.22953,0.22953,0.22953,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.24862,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.2677,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.28679,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.30588,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.32496,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.34405,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.36313,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.38222,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.40131,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.42039,0.43948,0.43948,0.43948,0.43948,0.43948,0.43948,0.43948,0.43948,0.43948,0.43948,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.45856,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.47765,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.49674,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.51582,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.53491,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.55399,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.57308,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.59216,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.61125,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.63034,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.64942,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.66851,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.68759,0.70668,0.70668];

let particlesArray;
let scaling;
let centering;
let network;
let origin;
let mode='brain';
let shift=false;
let x_coords=brain_x_coords;
let y_coords=brain_y_coords;
let ratio=30;
// get mouse position
let mouse =
	{
		x:null,
		y:null,
		radius: ((canvas.height/80) * (canvas.width/80))
	};
function ChangeMode(){
		if (mode=='brain' && !shift){
			mode='FiveNode';
			shift=true;
			for (let z=0; z< particlesArray.length; z++){
				particlesArray[z].x_origin=scaling*(Math.random()-Math.random())/100+scaling*Fivenode_x_coords[z]+centering;
				particlesArray[z].y_origin=scaling*(Math.random()-Math.random())/100+scaling*Fivenode_y_coords[z];
			}
		}
		else if (mode=='FiveNode' && !shift){
			mode='CBR';
			shift=true;
			for (let z=0; z< particlesArray.length; z++){
				particlesArray[z].x_origin=scaling*(Math.random()-Math.random())/100+scaling*CBR_x_coords[z]+centering;
				particlesArray[z].y_origin=scaling*(Math.random()-Math.random())/100+scaling*CBR_y_coords[z];
			}
		}
		else if (mode=='CBR' && !shift){
			mode='brain';
			shift=true;
			for (let z=0; z< particlesArray.length; z++){
				particlesArray[z].x_origin=scaling*(Math.random()-Math.random())/100+scaling*brain_x_coords[z]+centering;
				particlesArray[z].y_origin=scaling*(Math.random()-Math.random())/100+scaling*brain_y_coords[z];
			}
		}	
}

window.addEventListener('mousemove',
	function(event){
		mouse.x=event.x;
		mouse.y=event.y;
});

window.addEventListener('click',function(){ChangeMode()});

//create particle
class Particle{
	constructor(id,x,y,dx,dy,x_origin,y_origin,radius,color,excite,neighbor,evoke,locked){
		this.id=id;
		this.x=x;
		this.y=y;
		this.dx=dx;
		this.dy=dy;
		this.x_origin=x_origin;
		this.y_origin=y_origin;
		this.radius=radius;
		this.color=color;
		this.excite=excite;
		this.neighbor=neighbor;
		this.evoke=evoke;
		this.locked=locked;
	}
	
	draw(){
		ctx.beginPath();
		ctx.arc(this.x,this.y,this.radius, 0, Math.PI*2,false);
		ctx.fillStyle= 'rgb(0,'+this.color+',0)';
		ctx.fill();
	}
	
	
	update(){
		if (canvas.width>canvas.height){
		scaling=canvas.height;
		}
		else{
			scaling=canvas.width;
		}
		//keep particle within boundary of location
		if (0.001*scaling<(this.x-this.x_origin)*(this.x-this.x_origin)+(this.y-this.y_origin)*(this.y-this.y_origin)){
			this.dx=-this.dx;
			this.dy=-this.dy;
		}
		this.x += this.dx;
		this.y += this.dy;
		//locate nearest neighbor
		let dist=scaling;
		for (let cA=0; cA<particlesArray.length; cA++){
			let newdist=((this.x-particlesArray[cA].x)*(this.x-particlesArray[cA].x)+(this.y-particlesArray[cA].y)*(this.y-particlesArray[cA].y));
			if (newdist<dist && newdist !== 0 && particlesArray[cA].neighbor != this.id){
				dist=newdist;
				this.neighbor= cA;
			}	
		}	
		//generate event
		if (!this.excite && !this.evoke && Math.random()<0.0005){
			this.color=255;
			this.excite=true;
		}
		//check to see if evoke required
		if (this.evoke){
			this.color=255;
			this.excite=true;
			this.evoke=false;
		}
		//check to see if node is excited
		if (this.excite){
			this.color=this.color-8;
			if (this.color<0){
				this.color=0;
				this.excite=false;
			}
		}
		
	}
	update_switching(){
		if (canvas.width>canvas.height){
		scaling=canvas.height;
		}
		else{
			scaling=canvas.width;
		}
		let distX=this.x-this.x_origin;
		let distY=this.y-this.y_origin;

		if (!this.locked && 0.001*scaling<distX*distX+distY*distY){
			this.dx=-(30*Math.random()*(distX)/scaling);
			this.dy=-(30*Math.random()*(distY)/scaling);

		}
		else if (!this.locked && 0.001*scaling>=(this.x-this.x_origin)*(this.x-this.x_origin)+(this.y-this.y_origin)*(this.y-this.y_origin)){
			this.locked=true;
			this.dx = Math.random()/10;
			this.dy = Math.random()/10;
		}
		else if (this.locked && 0.001*scaling<(this.x-this.x_origin)*(this.x-this.x_origin)+(this.y-this.y_origin)*(this.y-this.y_origin)){
			this.dx=-this.dx;
			this.dy=-this.dy;
		}		
		//keep particle within boundary of location
		this.x += this.dx;
		this.y += this.dy;
		//locate nearest neighbor
		let dist=scaling;
		for (let cA=0; cA<particlesArray.length; cA++){
			let newdist=((this.x-particlesArray[cA].x)*(this.x-particlesArray[cA].x)+(this.y-particlesArray[cA].y)*(this.y-particlesArray[cA].y));
			if (newdist<dist && newdist !== 0 && particlesArray[cA].neighbor != this.id){
				dist=newdist;
				this.neighbor= cA;
			}	
		}	
		//generate event
		if (!this.excite && !this.evoke && Math.random()<0.001){
			this.color=255;
			this.excite=true;
		}
		//check to see if evoke required
		if (this.evoke){
			this.color=255;
			this.excite=true;
			this.evoke=false;
		}
		//check to see if node is excited
		if (this.excite){
			this.color=this.color-8;
			if (this.color<0){
				this.color=0;
				this.excite=false;
			}
		}
	}
	
}
//initialize particles
function init(){
	particlesArray=[];
	network=false;
	if (canvas.width>canvas.height){
		scaling=canvas.height;
		centering=canvas.width/2-scaling/2;
	}
	else{
		scaling=canvas.width;
	}
	let numberOfParticles = x_coords.length;
	for (let i=0; i< numberOfParticles; i++){
		let radius = Math.random()*2+1;
		let x = scaling*(Math.random()-Math.random())/100+scaling*x_coords[i]+centering;
		let y = scaling*(Math.random()-Math.random())/100+scaling*y_coords[i];
		let x_origin = x;
		let y_origin = y;
		let dx = Math.random()/10;
		let dy = Math.random()/10;
		let color=0;
		let excite=false;
		let neighbor=1;
		let evoke=false;
		let id=i;
		let locked=false;
		
		particlesArray.push(new Particle(id,x,y,dx,dy,x_origin,y_origin,radius,color,excite,neighbor,evoke,locked));
	}
}

//animation loop
function animate(){
	requestAnimationFrame(animate);
	ctx.clearRect(0,0,innerWidth,innerHeight);
	if (!shift){
		for (let i=0; i < particlesArray.length; i++){
			particlesArray[i].update();
			if (particlesArray[i].excite && Math.random()<0.01){
				network=true;
				origin=i;
				break;
			}
		}
		if (network){
			let nb=particlesArray[origin].neighbor;
			if (!particlesArray[nb].excite){
				particlesArray[nb].evoke=true;
				particlesArray[nb].update();
				let prob=Math.random();
				let linklength=100;
				if (prob<=0.05){
					linklength=538;
				}
				else if(prob<0.3 && prob>0.05){
					linklength=400;
				}
				else if (prob>=0.3 && prob<0.6){
					linklength=200;
				}

				for (let j=0; j < linklength; j++){
					nb=particlesArray[nb].neighbor;
					particlesArray[nb].evoke=true;
					particlesArray[nb].update();
				}
			}
		}
		connect();
		for (let i=0; i < particlesArray.length; i++){
			particlesArray[i].draw();
		}
	}
	else {
		let breaklock=particlesArray.length;
		for (let i=0; i < particlesArray.length; i++){
			if (!particlesArray[i].locked){
				breaklock-=1;
				particlesArray[i].update_switching();
			}
			else {
				particlesArray[i].update();
			}
			if (particlesArray[i].excite && Math.random()<0.01){
				network=true;
				origin=i;
			}
			if (network){
				let nb=particlesArray[origin].neighbor;
				if (!particlesArray[nb].excite){
					particlesArray[nb].evoke=true;
					particlesArray[nb].update();
					let prob=Math.random();
					let linklength=100;
					if(prob<0.3){
						linklength=400;
					}
					else if (prob>=0.3 && prob<0.6){
						linklength=200;
					}

					for (let j=0; j < linklength; j++){
						nb=particlesArray[nb].neighbor;
						particlesArray[nb].evoke=true;
						particlesArray[nb].update();
					}
				}
			}
		}
		connect();
		for (let i=0; i < particlesArray.length; i++){
			particlesArray[i].draw();
		}
		if (breaklock==particlesArray.length){
			for (let i=0; i < particlesArray.length; i++){
				particlesArray[i].locked=false;
			}
			shift=false;
		}
	}
}

//connect particles within a radius
function connect(){
	let stroke="rgba(0,0,0,0.5)"
	if (mode=='brain'){
		ratio=20;
		stroke="rgba(0,0,0,0.5)"
	}
	else {
		ratio=36;
		stroke="rgba(0,0,0,0.7)"
	}
	for (let a=0; a<particlesArray.length; a++){
		for (let b=0; b<particlesArray.length; b++){
			let distance= (( particlesArray[a].x-particlesArray[b].x)*(particlesArray[a].x-particlesArray[b].x) + (particlesArray[a].y - particlesArray[b].y)*(particlesArray[a].y - particlesArray[b].y));
			if (distance < ( canvas.height/ratio*canvas.width/ratio)){
				ctx.strokeStyle=stroke;
				ctx.lineWidth=0.5;
				ctx.beginPath();
				ctx.moveTo(particlesArray[a].x,particlesArray[a].y);
				ctx.lineTo(particlesArray[b].x,particlesArray[b].y);
				ctx.stroke();
			}
		}
	}
	
	
}
function timed_ChangeMode() {
	setTimeout(function(){
		mode='FiveNode';
		shift=true;
		for (let z=0; z< particlesArray.length; z++){
			particlesArray[z].x_origin=scaling*(Math.random()-Math.random())/100+scaling*Fivenode_x_coords[z]+centering;
			particlesArray[z].y_origin=scaling*(Math.random()-Math.random())/100+scaling*Fivenode_y_coords[z];
		}
		setTimeout(function(){
			mode='CBR';
			shift=true;
			for (let z=0; z< particlesArray.length; z++){
				particlesArray[z].x_origin=scaling*(Math.random()-Math.random())/100+scaling*CBR_x_coords[z]+centering;
				particlesArray[z].y_origin=scaling*(Math.random()-Math.random())/100+scaling*CBR_y_coords[z];
			}
		}, 7000);
	}, 3000);
}

init();
animate();
timed_ChangeMode();